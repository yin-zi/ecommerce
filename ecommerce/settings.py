"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 3.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-q)g_kfm_wt^b1cyntjiq_wq@!pe%!$3)fx9yloj%*=b6knn(^9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'apps.user.apps.UserConfig',
    'apps.cart.apps.CartConfig',
    'apps.order.apps.OrderConfig',
    'apps.goods.apps.GoodsConfig',
    'apps.captcha.apps.CaptchaConfig',
    'tinymce',
    'haystack',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
# CREATE DATABASE `ecommerce` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ecommerce',
        'USER': 'admin',
        'PASSWORD': 'admin',
        'HOST': 'localhost',
        'PORT': 3306,
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']  # 静态文件目录

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 启用自定义用户模型 使用django内置用户认证系统
AUTH_USER_MODEL = 'user.User'
AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.AllowAllUsersModelBackend']

# login_required装饰器 LoginRequiredMixin类 重定向登录url
LOGIN_URL = '/user/login/'

# 发送邮件的配置
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # 控制台后端仅将邮件发送至标准输出(测试用)
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = '2230979122@qq.com'  # 发送邮件的邮箱
EMAIL_HOST_PASSWORD = 'jwdjkuluhzalebfd'  # 在邮箱中设置的客户端授权密码
EMAIL_USE_SSL = True  # 与 SMTP 服务器对话使用隐式 TLS（安全）连接

# django-redis 作为cache后端配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://localhost:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://localhost:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "history": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://localhost:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "captcha": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://localhost:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}
# django-redis 作为session后端配置
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# celery配置
CELERY_BROKER_URL = 'redis://localhost:6379/3'
CELERY_TIMEZONE = "Asia/Shanghai"
# Only add pickle to this list if your broker is secured from unwanted access (see userguide/security.html)
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/3'

# FastDFS分布式文件系统配置
DEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'  # 配置文件存储类
FDFS_CLIENT_CONF = '/etc/fdfs/client.conf'  # 配置fdfs客户端配置文件路径
FDFS_SERVER_URL = 'http://0.0.0.0:8888/'  # 配置fdfs存储服务器上Nginx的ip和端口号

# 全文检索框架配置
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',  # 使用whoosh引擎
        'PATH': BASE_DIR / 'whoosh_index',  # 索引文件路径
    }
}
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'  # 当添加 修改 删除数据时，自动生成索引
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5  # 控制搜索结果每页显示的数量

# 日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志记录器
    'formatters': {  # 日志信息的文本格式
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {module} {lineno} {message}',
            'style': '{',
        },
    },
    'filters': {  # 在日志记录从logger传到handler的过程中进行过滤
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 处理logger中每一条消息的引擎
        'console': {  # 向终端输出日志
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向文件输出日志
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs/debug.log',
            'formatter': 'verbose',
            'maxBytes': 100 * 1024 * 1024,  # 日志文件大小100M
            'backupCount': 3,  # 日志备份文件个数
        },
    },
    'loggers': {  # 日志系统的入口
        'django': {
            'handlers': ['console', 'file'],  # 同时向终端和文件输出日志
            'level': 'WARNING',  # 日志记录器接收的日志最低级别
            'propagate': True,  # 是否继续传递日志信息
        },
    },
}

"""
# 其它命令
python manage.py makemigration
python manage.py migrate
python manage.py rebuild_index  #重建索引文件

# 启动项目
sudo fdfs_trackerd /etc/fdfs/tracker.conf restart  # 启动tracker
sudo fdfs_storaged /etc/fdfs/storage.conf restart  # 启动storage
sudo /usr/local/nginx/sbin/nginx  # 启动nginx
redis-server
celery -A ecommerce worker -l INFO -P eventlet  # Linux运行无需-P及其参数
py manage.py runserver [::]:8469

# 支付宝沙箱账号密码
qoqamp8198@sandbox.com
111111

# todo:fix-bug
首页焦点图 只有一张会左右切换会有白屏

商品详情页 立即购买 按钮点击不跳转(考虑是否删除此按钮
"""
